#!/bin/bash

# Tested and passing on Ubuntu 18.04.4LTS with Kernel 5.3.18-generic.
# Takes roughly 2 minutes to run with -with-features=normal, and average internet speed.

# ./configure output is logged in configure_log.

# Set build configuration
# Consult vim/src/feature.h for more options
config='-enable-python3interp=yes
	-with-features=normal
	-enable-multibyte
	-enable-python3interp=yes
	-with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu
	-enable-cscope
	-enable-terminal
	-prefix=/usr/local'

main () {
	# Remove existing Vim installations
	sudo apt-get -y remove vim vim-runtime || reportFailure "Remove existing packages"

	# Install dependencies
	sudo apt-get -y install libncurses5-dev \
						libgtk2.0-dev libatk1.0-dev \
						libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
						python3-dev ruby-dev lua5.1 liblua5.1-dev libperl-dev git liblua5.1-dev || 
		reportFailure "Install dependencies"

	# Clone vim repository
	(test -d vim && echo "Found existing vim directory; will not clone.") || 
		git clone https://github.com/vim/vim.git ||
		reportFailure "Clone Vim repository"

	cd vim || reportFailure "Enter vim directory"

	version=$(grep -e "for version" README.md |
		awk -F ' ' '{print $6}' |
		sed "s/\.//g")
	
	vimdir="/usr/local/share/vim/vim${version}"

	# Run configuration script, then build only if configuration succeeded
	(configure "$config" &&
		make VIMRUNTIMEDIR="$vimdir" &&
		sudo make install) || reportFailure "Configure and build vim"

	# Update defaults
	sudo update-alternatives --install /usr/bin/editor editor /usr/local/bin/vim 1
	sudo update-alternatives --set editor /usr/local/bin/vim
	sudo update-alternatives --install /usr/bin/vi vi /usr/local/bin/vim 1
	sudo update-alternatives --set vi /usr/local/bin/vim

	# Remove vim clone
	cd ..
	rm -rf vim
}

configure() {
	printf "Running Vim configuration script.\n"

	# Do NOT wrap $1 in double quotations.
	# The configure script will interpret the argument as a single flag.
	./configure $1 |& tee ../configure_log

	endOfConfigurationOutput=$(tail -10 ../configure_log)

	if [[ $endOfConfigurationOutput == *"error: "* ]] || [[ $endOfConfigurationOutput == *"WARNING: "* ]] ; then
		return 1
	fi
}

reportFailure () {
	RED='\033[0;31m'
	NC='\033[0m' # No Color

	printf "${RED}FAILED TO: $1 \nEXITING. ${NC}\n"
	exit 1
}

main

